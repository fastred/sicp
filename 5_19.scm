(load "5_17.scm")

(define (set-breakpoint machine label n)
  ((machine 'set-breakpoint) label n))
(define (cancel-breakpoint machine label n)
  ((machine 'cancel-breakpoint) label n))
(define (cancel-all-breakpoints machine)
  (machine 'cancel-all-breakpoints))
(define (proceed-machine machine)
  (machine 'proceed))
(define (display-bp-info lab num)
  (newline)
  (display "Label: ")
  (display lab)
  (newline)
  (display "offset: " )
  (display num)
  'breaked)
(define (make-new-machine)
  (let ((pc (make-register 'pc))
        (flag (make-register 'flag))
        (stack (make-stack))
        (the-instruction-sequence '())
        (inst-count 0)
        ; as said in assignment we numerate instructions in labels from 1
        (lab-inst-count 1)
        (current-lab 0)
        (inst-tracing #f)
        (breakpoints '()))
    (let ((the-ops
           (list (list 'initialize-stack
                       (lambda () (stack 'initialize)))
                 (list 'print-stack-statistics
                       (lambda () (stack 'print-statistics)))))
          (register-table
           (list (list 'pc pc) (list 'flag flag))))
      (define (allocate-register name)
        (if (assoc name register-table)
            (error "Multiply defined register: " name)
            (set! register-table
                  (cons (list name (make-register name))
                        register-table)))
        'register-allocated)
      (define (lookup-register name)
        (let ((val (assoc name register-table)))
          (if val
              (cadr val)
              (error "Unknown register:" name))))
      (define (execute omit-next-breakpoint)
        (let ((insts (get-contents pc)))
          (if (null? insts)
            'done
            (let* ((instruction (car insts))
                   (instruction-label (instruction-preced-label instruction)))
              (if (not-null? instruction-label)
                (begin
                  (set! current-lab instruction-label)
                  (set! lab-inst-count 1)))
              (if (and (member (cons current-lab lab-inst-count) breakpoints)
                       (not omit-next-breakpoint))
                (display-bp-info current-lab lab-inst-count)
                (begin
                  (set! inst-count (+ inst-count 1))
                  (set! lab-inst-count (+ lab-inst-count 1))
                  ; tracing
                  (if inst-tracing
                    (begin
                      (if (not-null? (instruction-preced-label instruction))
                        (begin (display (instruction-preced-label instruction))
                               (newline)))
                      (display (instruction-text instruction))
                      (newline)))
                  ((instruction-execution-proc instruction))
                  (execute #f)))))))
      (define (get-inst-count) inst-count)
      (define (reset-inst-count)
          (set! inst-count 0)
          'ok)
      (define (trace-on) (set! inst-tracing #t) 'ok)
      (define (trace-off) (set! inst-tracing #f) 'ok)
      (define (set-breakpoint label n)
        (if (null? breakpoints)
          (set! breakpoints (list (cons label n)))
          (append! breakpoints (list (cons label n))))
        'ok)
      (define (cancel-breakpoint label n)
        (set! breakpoints (filter not-null? (map (lambda (x)
                                 (if (equal? (cons label n) x)
                                   '()
                                   x)) breakpoints))))
      (define (proceed) (execute #t))
      (define (dispatch message)
        (cond ((eq? message 'start)
               (set-contents! pc the-instruction-sequence)
               (execute #f))
              ((eq? message 'install-instruction-sequence)
               (lambda (seq) (set! the-instruction-sequence seq)))
              ((eq? message 'allocate-register) allocate-register)
              ((eq? message 'get-register) lookup-register)
              ((eq? message 'install-operations)
               (lambda (ops) (set! the-ops (append the-ops ops))))
              ((eq? message 'stack) stack)
              ((eq? message 'operations) the-ops)
              ((eq? message 'get-inst-count) (get-inst-count))
              ((eq? message 'reset-inst-count) (reset-inst-count))
              ((eq? message 'trace-on) (trace-on))
              ((eq? message 'trace-off) (trace-off))
              ((eq? message 'set-breakpoint) set-breakpoint)
              ((eq? message 'cancel-breakpoint) cancel-breakpoint)
              ((eq? message 'cancel-all-breakpoints) (set! breakpoints '()))
              ((eq? message 'proceed) (proceed))
              (else (error "Unknown request -- MACHINE" message))))
      dispatch)))

(define gcd-machine
  (make-machine
   '(a b t)
   (list (list '= =) (list '* *) (list '+ +) (list '- -) (list '< <)
         (list 'rem remainder))
   '(test-b
       (test (op =) (reg b) (const 0))
       (branch (label gcd-done))
       (assign t (op rem) (reg a) (reg b))
       (assign a (reg b))
       (assign b (reg t))
       (goto (label test-b))
     gcd-done)))

(gcd-machine 'trace-on)
(set-breakpoint gcd-machine 'test-b 4)
(set-register-contents! gcd-machine 'a 36)
(set-register-contents! gcd-machine 'b 24)
(start gcd-machine)
(get-register-contents gcd-machine 'a)
(proceed-machine gcd-machine)
(get-register-contents gcd-machine 'a)
(proceed-machine gcd-machine)
(get-register-contents gcd-machine 'a)

(set-register-contents! gcd-machine 'a 36)
(set-register-contents! gcd-machine 'b 24)
(start gcd-machine)
(get-register-contents gcd-machine 'a)
