(load "3_70.scm")
(define square-weight (lambda (x) (+ (square (car x)) (square (cadr x)))))
(define pairs-sorted-by-square (weighted-pairs integers integers square-weight))
(define (same-weight-triples possible-pairs weight-fun)
  (define (rec possible-pairs last1w last2w last1p last2p)
    (let* ((pair (stream-car possible-pairs))
           (weight (weight-fun pair)))
      (if (stream-null? possible-pairs)
        the-empty-stream
        (if (= weight last1w last2w)
          (cons-stream (list weight last1p last2p pair)
                       (rec (stream-cdr possible-pairs) weight last1w pair last1p))
          (rec (stream-cdr possible-pairs) weight last1w pair last1p)))))
  (rec possible-pairs 0 0 '() '()))

(define result (same-weight-triples pairs-sorted-by-square square-weight))
;(stream-ref result 0)
;(stream-ref result 1)
;(stream-ref result 2)
