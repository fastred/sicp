;(define (cons x y)
  ;(define (set-x! v) (set! x v))
  ;(define (set-y! v) (set! y v))
  ;(define (dispatch m)
    ;(cond ((eq? m 'car) x)
          ;((eq? m 'cdr) y)
          ;((eq? m 'set-car!) set-x!)
          ;((eq? m 'set-cdr!) set-y!)
          ;(else (error "Undefined operation -- CONS" m))))
  ;dispatch)
;(define (car z) (z 'car))
;(define (cdr z) (z 'cdr))
;(define (set-car! z new-value)
  ;((z 'set-car!) new-value)
  ;z)
;(define (set-cdr! z new-value)
  ;((z 'set-cdr!) new-value)
  ;z)


(define (make-queue)
  (let ((front-ptr '())
        (rear-ptr '()))
    (define (empty-queue?) (null? front-ptr))
    (define (front-queue)
      (if (empty-queue?)
        (error "FRONT called with an empty queue")
        (car front-ptr)))
    (define (insert-queue! item)
      (let ((new-pair (cons item '())))
        (cond ((empty-queue?)
               (set! front-ptr new-pair)
               (set! rear-ptr new-pair)
               front-ptr)
              (else
                (set-cdr! rear-ptr new-pair)
                (set! rear-ptr new-pair)
                front-ptr))))
    (define (delete-queue!)
      (cond ((empty-queue?)
             (error "DELETE! called with an empty queue"))
            (else
              (set! front-ptr (cdr front-ptr))
              front-ptr))) 
    (define (dispatch m)
      (cond ((eq? m 'empty-queue?) (empty-queue?))
            ((eq? m 'front-queue) (front-queue))
            ((eq? m 'insert-queue!) insert-queue!)
            ((eq? m 'delete-queue!) (delete-queue!))
            (else (error "Undefined operation -- QUEUE" m))))
    dispatch))

(define (insert-queue! q item)
  ((q 'insert-queue!) item))
(define (empty-queue? q)
  (q 'empty-queue?))
(define (front-queue q)
  (q 'front-queue))
(define (delete-queue! q)
  (q 'delete-queue!))

(define q1 (make-queue))
(insert-queue! q1 'a)
(insert-queue! q1 'b)
(delete-queue! q1)
(delete-queue! q1)
