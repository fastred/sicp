; a)
(define (fn-rec n)
  (cond ((< n 3) n)
        (else (+ (fn-rec (- n 1))
                 (* 2 (fn-rec (- n 2)))
                 (* 3 (fn-rec (- n 3)))))))
(fn-rec 0)
(fn-rec 1)
(fn-rec 2)
(fn-rec 3)
(fn-rec 4)
(fn-rec 5)
(fn-rec 6)

; b)
(define (fn n)
  (fn-iter 2 1 0 n))
(define (fn-iter a b c count)
  (if (= count 0)
    c
    (fn-iter (+ a (* 2 b) (* 3 c)) a b (- count 1))))
(fn 0)
(fn 1)
(fn 2)
(fn 3)
(fn 4)
(fn 5)
(fn 6)
